<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="[IAL] Fluxo de realização de audiência">
    <description><![CDATA[cd_fluxo: IAL_FLX_REALIZA_AUD
Descrição: Fluxo destinado a realização das audiências.
Ajustes realizados: 
- Ajustes na combo de acordo.]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="solicitante">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria e Gabinete">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10:1338')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10:1338,9:1469')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="solicitante" priority="3"/>
        <transition to="[IAL] Recuperar Audiência" name="[IAL] Recuperar Audiência"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{processoTrfHome.instance.processoAudienciaList.size() &gt; 0 ? 'Minutar' : 'Analisar'}" name="[IAL] Existe audiência designada?">
        <transition to="[IAL] Audiência pendente de designação - ANALISAR" name="Analisar"/>
        <transition to="[IAL] Audiência pendente de ata - MINUTAR" name="Minutar"/>
    </decision>
    <decision expression="#{processoAudienciaManager.findById(tramitacaoProcessualService.recuperaVariavel('pje:fluxo:audienciaSelecionada').idProcessoAudiencia).inAcordo ? '[IAL] Incluir no fluxo de evolução da classe' : '[IAL] Audiência sem acordo - ANALISAR'}" name="[IAL] Houve acordo?">
        <transition to="[IAL] Incluir no fluxo de evolução da classe" name="[IAL] Incluir no fluxo de evolução da classe"/>
        <transition to="[IAL] Audiência sem acordo - ANALISAR" name="[IAL] Audiência sem acordo - ANALISAR"/>
    </decision>
    <task-node end-tasks="true" name="[IAL] Audiência pendente de designação - ANALISAR">
        <task name="[IAL] Audiência pendente de designação - ANALISAR" swimlane="Secretaria e Gabinete" priority="3"/>
        <transition to="Nó de Desvio - [IAL] Fluxo de realização de audiência" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[IAL] Incluir no fluxo de seção de cumprimento" name="Cancelar realização de audiência"/>
    </task-node>
    <task-node end-tasks="true" name="[IAL] Audiência pendente de ata - MINUTAR">
        <task name="[IAL] Audiência pendente de ata - MINUTAR" swimlane="Secretaria e Gabinete" priority="3">
            <controller>
                <variable name="ataAudiencia" mapped-name="textEditCombo:ataAudiencia" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - [IAL] Fluxo de realização de audiência" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[IAL] Audiência pendente de ata - ASSINAR " name="Assinar ata de audiência"/>
        <transition to="[IAL] Incluir no fluxo de seção de cumprimento" name="Cancelar realização de audiência"/>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','87')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="[IAL] Audiência pendente de ata - ASSINAR ">
        <task name="[IAL] Audiência pendente de ata - ASSINAR " swimlane="Secretaria e Gabinete" priority="3">
            <controller>
                <variable name="ataAudiencia" mapped-name="textEditSignature:ataAudiencia" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - [IAL] Fluxo de realização de audiência" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[IAL] Audiência pendente de ata - AJUSTAR" name="Ajustar ata de audiência"/>
        <transition to="[IAL] Audiência pendente de informações - PREENCHER" name="Preencher dados da audiência">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Preencher dados da audiência')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','87')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="[IAL] Audiência pendente de ata - AJUSTAR">
        <task name="[IAL] Audiência pendente de ata - AJUSTAR" swimlane="Secretaria e Gabinete" priority="3">
            <controller>
                <variable name="ataAudiencia" mapped-name="textEditCombo:ataAudiencia" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - [IAL] Fluxo de realização de audiência" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[IAL] Audiência pendente de ata - ASSINAR " name="Assinar ata de audiência"/>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','87')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="[IAL] Audiência pendente de informações - PREENCHER">
        <task name="[IAL] Audiência pendente de informações - PREENCHER" swimlane="Secretaria e Gabinete" priority="3">
            <controller>
                <variable name="ProcessoAudiencia_informarDadosAudiencia" mapped-name="frame:ProcessoAudiencia_informarDadosAudiencia" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - [IAL] Fluxo de realização de audiência" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[IAL] Lançar movimentações" name="[IAL] Lançar movimentações"/>
    </task-node>
    <task-node end-tasks="true" name="[IAL] Audiência sem acordo - ANALISAR">
        <task name="[IAL] Audiência sem acordo - ANALISAR" swimlane="Secretaria e Gabinete" priority="3"/>
        <transition to="Nó de Desvio - [IAL] Fluxo de realização de audiência" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[IAL] Incluir no fluxo de seção de cumprimento" name="Concluir"/>
    </task-node>
    <node name="[IAL] Incluir no fluxo de evolução da classe">
        <transition to="[IAL] Apagar variáveis" name="[IAL] Apagar variáveis"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'IAL_EVOL_CLASS', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="[IAL] Incluir no fluxo de seção de cumprimento">
        <transition to="[IAL] Apagar variáveis" name="[IAL] Apagar variáveis"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'IAL_FLX_SEC_ANAL_CUMP', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="[IAL] Lançar movimentações">
        <transition to="[IAL] Houve acordo?" name="[IAL] Houve acordo?"/>
        <event type="node-enter">
            <action expression="#{processoAudienciaHome.registrarMovimentoAudiencia()}"/>
        </event>
    </node>
    <node name="[IAL] Recuperar Audiência">
        <transition to="[IAL] Existe audiência designada?" name="[IAL] Existe audiência designada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:audienciaSelecionada', processoJudicialManager.getAudienciaDesignadaMaisAntiga(tramitacaoProcessualService.recuperaProcesso()))}"/>
        </event>
    </node>
    <node name="[IAL] Apagar variáveis">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ataAudiencia')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - [IAL] Fluxo de realização de audiência">
        <task name="Nó de Desvio - [IAL] Fluxo de realização de audiência" swimlane="Nó de Desvio - [IAL] Fluxo de realização de audiência" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="[IAL] Audiência pendente de designação - ANALISAR" name="[IAL] Audiência pendente de designação - ANALISAR"/>
        <transition to="[IAL] Audiência pendente de ata - MINUTAR" name="[IAL] Audiência pendente de ata - MINUTAR"/>
        <transition to="[IAL] Audiência pendente de ata - ASSINAR " name="[IAL] Audiência pendente de ata - ASSINAR "/>
        <transition to="[IAL] Audiência pendente de ata - AJUSTAR" name="[IAL] Audiência pendente de ata - AJUSTAR"/>
        <transition to="[IAL] Audiência pendente de informações - PREENCHER" name="[IAL] Audiência pendente de informações - PREENCHER"/>
        <transition to="[IAL] Audiência sem acordo - ANALISAR" name="[IAL] Audiência sem acordo - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
